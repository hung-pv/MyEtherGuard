package meg;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.FileUtils;

public class KeystoreManager {
	
	private static final File FILE_AES_KEYSTORE = new File(new String(Base64.getDecoder().decode("S0VFUF9USElTX1NBRkUuc3lz"), StandardCharsets.UTF_8));

	public static File getKeystoreFile() {
		return FILE_AES_KEYSTORE;
	}

	public static boolean isKeystoreFileExists() {
		return FILE_AES_KEYSTORE.exists();
	}
	
	public static void save(KeystoreContent keystore) throws Exception {
		keystore.setAdditionalInformation(String.format("Generated by JVM %s at %s", Runtime.class.getPackage().getImplementationVersion(), new SimpleDateFormat("HH:mm:ss dd/MM/yy").format(new Date())));
		FileUtils.write(FILE_AES_KEYSTORE, keystore.toString(), StandardCharsets.UTF_8);
	}

	public static byte[] getEncryptedKey() throws Exception {
		List<String> lines = FileUtils.readLines(FILE_AES_KEYSTORE, StandardCharsets.UTF_8);
		if (lines.size() < 2) {
			return null;
		}
		KeystoreContent keystore = new KeystoreContent();
		keystore.setEncryptedKey(lines.get(1));
		return keystore.getEncryptedKey();
	}
	
	public static class KeystoreContent {
		private String additionalInformation;
		private byte[] encryptedKey;
		
		public String getAdditionalInformation() {
			return additionalInformation;
		}
		
		public void setAdditionalInformation(String additionalInformation) {
			this.additionalInformation = additionalInformation;
		}
		
		public byte[] getEncryptedKey() {
			return encryptedKey;
		}
		
		public void setEncryptedKey(byte[] encryptedKey) {
			this.encryptedKey = encryptedKey;
		}
		
		public void setEncryptedKey(String base64) {
			this.encryptedKey = Base64.getDecoder().decode(base64);
		}
		
		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder();
			sb.append(this.additionalInformation == null ? "" : this.additionalInformation);
			sb.append('\n');
			sb.append(Base64.getEncoder().encodeToString(this.encryptedKey));
			return sb.toString();
		}
	}
}
